// ✅ Import the configureStore function from Redux Toolkit
import { configureStore } from '@reduxjs/toolkit';
// → 'import': JavaScript keyword used to bring in code from another module or package.
// → '{ configureStore }': Using destructuring to only import the 'configureStore' function.
// → '@reduxjs/toolkit': The official Redux Toolkit package for simplified Redux setup.


// ✅ Import the entire counterSlice object from your slice file
import { counterSlice } from '../slice/counterSlice';
// → 'import { counterSlice }': Importing the slice object you created using createSlice().
// → '../slice/counterSlice' means:
//      - '..' : go up one folder level
//      - 'slice/' : go into the 'slice' directory
//      - 'counterSlice' : import from the 'counterSlice.js' or 'counterSlice.ts' file (based on project setup)


// ✅ Create the Redux store using configureStore()
export const store = configureStore({
    // → 'export const store' : We're exporting this store instance so other files (like index.js or Provider setup) can access it.
    // → 'configureStore({...})' : This function sets up the Redux store with some defaults:
    //      - Redux DevTools integration
    //      - Good default middleware (like for async actions)
    //      - Easier syntax for combining reducers

    reducer: {
        // → This 'reducer' field is an object that combines all slice reducers.
        // → The keys (like 'counter') define the **state slice names** in the global state tree.

        counter: counterSlice.reducer,
        // → 'counter' is the state key in the global Redux state.
        //    Accessed in components as: state.counter.value
        // → 'counterSlice.reducer' is the actual reducer function generated by createSlice()
    },
});
